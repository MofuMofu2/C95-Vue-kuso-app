<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?aid style="50" type="snippet" readerVersion="6.0" featureSet="513" product="8.0(370)" ?>
<?aid SnippetType="InCopyInterchange"?>
<Document DOMVersion="8.0" Self="pandoc_doc">
    <RootCharacterStyleGroup Self="pandoc_character_styles">
      <CharacterStyle Self="$ID/NormalCharacterStyle" Name="Default" />
      <CharacterStyle Self="CharacterStyle/" Name="">
        <Properties>
          <BasedOn type="object">$ID/NormalCharacterStyle</BasedOn>
        </Properties>
      </CharacterStyle>
      <CharacterStyle Self="CharacterStyle/Code" Name="Code">
        <Properties>
          <BasedOn type="object">$ID/NormalCharacterStyle</BasedOn>
          <AppliedFont type="string">Courier New</AppliedFont>
        </Properties>
      </CharacterStyle>
      <CharacterStyle Self="CharacterStyle/Link" Name="Link">
        <Properties>
          <BasedOn type="object">$ID/NormalCharacterStyle</BasedOn>
        </Properties>
      </CharacterStyle> 
    </RootCharacterStyleGroup>
    <RootParagraphStyleGroup Self="pandoc_paragraph_styles">
      <ParagraphStyle Self="$ID/NormalParagraphStyle" Name="$ID/NormalParagraphStyle"
          SpaceBefore="6" SpaceAfter="6"> <!-- paragraph spacing -->
        <Properties>
          <TabList type="list">
            <ListItem type="record">
              <Alignment type="enumeration">LeftAlign</Alignment>
              <AlignmentCharacter type="string">.</AlignmentCharacter>
              <Leader type="string"></Leader>
              <Position type="unit">10</Position> <!-- first tab stop -->
            </ListItem>
          </TabList>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Blockquote &gt; BulList" Name="Blockquote &gt; BulList" BulletsAndNumberingListType="BulletList" LeftIndent="20">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
          <TabList type="list">
            <ListItem type="record">
              <Alignment type="enumeration">LeftAlign</Alignment>
              <AlignmentCharacter type="string">.</AlignmentCharacter>
              <Leader type="string" />
              <Position type="unit">10</Position>
            </ListItem>
          </TabList>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Blockquote &gt; BulList &gt; first" Name="Blockquote &gt; BulList &gt; first" BulletsAndNumberingListType="BulletList" LeftIndent="20">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
          <TabList type="list">
            <ListItem type="record">
              <Alignment type="enumeration">LeftAlign</Alignment>
              <AlignmentCharacter type="string">.</AlignmentCharacter>
              <Leader type="string" />
              <Position type="unit">10</Position>
            </ListItem>
          </TabList>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Blockquote &gt; Paragraph" Name="Blockquote &gt; Paragraph" LeftIndent="10">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/BulList" Name="BulList" BulletsAndNumberingListType="BulletList" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
          <TabList type="list">
            <ListItem type="record">
              <Alignment type="enumeration">LeftAlign</Alignment>
              <AlignmentCharacter type="string">.</AlignmentCharacter>
              <Leader type="string" />
              <Position type="unit">10</Position>
            </ListItem>
          </TabList>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/BulList &gt; first" Name="BulList &gt; first" BulletsAndNumberingListType="BulletList" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
          <TabList type="list">
            <ListItem type="record">
              <Alignment type="enumeration">LeftAlign</Alignment>
              <AlignmentCharacter type="string">.</AlignmentCharacter>
              <Leader type="string" />
              <Position type="unit">10</Position>
            </ListItem>
          </TabList>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Caption" Name="Caption" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/CodeBlock" Name="CodeBlock" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
          <AppliedFont type="string">Courier New</AppliedFont>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Figure" Name="Figure" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Footnote &gt; Paragraph" Name="Footnote &gt; Paragraph" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Header1" Name="Header1" LeftIndent="0" PointSize="36">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Header2" Name="Header2" LeftIndent="0" PointSize="30">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Header3" Name="Header3" LeftIndent="0" PointSize="24">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Header4" Name="Header4" LeftIndent="0" PointSize="18">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/NumList" Name="NumList" NumberingExpression="^#.^t" NumberingLevel="1" BulletsAndNumberingListType="NumberedList" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/NumList &gt; first" Name="NumList &gt; first" NumberingExpression="^#.^t" NumberingLevel="1" BulletsAndNumberingListType="NumberedList" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Paragraph" Name="Paragraph" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle> 
    </RootParagraphStyleGroup>
    <RootTableStyleGroup Self="pandoc_table_styles">
      <TableStyle Self="TableStyle/Table" Name="Table" />
    </RootTableStyleGroup>
    <RootCellStyleGroup Self="pandoc_cell_styles">
      <CellStyle Self="CellStyle/Cell" AppliedParagraphStyle="ParagraphStyle/$ID/[No paragraph style]" Name="Cell" />
    </RootCellStyleGroup>
  <Story Self="pandoc_story"
      TrackChanges="false"
      StoryTitle=""
      AppliedTOCStyle="n"
      AppliedNamedGrid="n" >
    <StoryPreference OpticalMarginAlignment="true" OpticalMarginSize="12" />

<!-- body needs to be non-indented, otherwise code blocks are indented too far -->
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header1">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>動的に本の情報を切り替える実装を追加する</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>このままでもそれなりに見栄えはします。しかし、りまりま団の同人誌は6冊もあります。一番思い入れがあるのは1冊目の</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>という本ですが</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle" Position="Superscript">
    <Footnote>
      <ParagraphStyleRange>
        <CharacterStyleRange>
          <Content><?ACE 4?></Content>
        </CharacterStyleRange>
      </ParagraphStyleRange>
      <ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Footnote &gt; Paragraph">
        <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
          <Content>	インプレスR＆Dさんから商業化されて、シリーズのまとめ本にも入れてもらって、なんか連載とかいう新しい企画に載せてもらって2018年に改版もされてBooth販売もされて…。この本くんに何回励まされたことか…またこういうものを作りたいです。</Content>
        </CharacterStyleRange>
      </ParagraphStyleRange>
    </Footnote>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>、せっかく作ったのだから本は全部載せたいと思いました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header2">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>データの持ち方を考える</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>載せる情報は次の通りです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>本のタイトル</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>書影</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>概要の説明文</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>通販のURL</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>紹介ブログのURL</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>商業本のURL</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>KUSO POINT</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>問題はこの情報をどこで管理するか？ということです。このとき思いついた手段をあげます。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>RDB</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>NoSQL</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>クラウドのサービス（Amazon Redshift系列）</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Google SpreadSheet</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JSONなどのテキストにしてassetsディレクトリに置いておく</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>データの管理と言えばRDBやNoSQLですね。NoSQLであればJSON形式でデータのやりとりができるので、Vue.jsで情報を利用するのに役立ちそうです。ただし、これらはホスティングにお金がかかります。サービスを使うのも、サーバーを借りるのもお金がかかる点では一緒です。さらに、情報量も項目数も少ないので、サーバー費用が少し勿体無いと思いました。お金ないし（重要）。 次にGoogle SpreadSheetですが、今回の情報の形式だと横に長いSpreadSheetができそうだと思いました。関連URLには複数のURLとタイトルがひも付きますし、KUSO Pointも同様です。これは記載することが面倒そうなのでやめました。また、Google Sheets APIは利用したことがないので、この利用方法をあれこれ模索できるだけの時間はないなと判断しました。 というわけで、消去法でJSONに本の情報を記載し、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>assets</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>ディレクトリから読み込む方式としました。書影は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>assets</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>ディレクトリに全て配置し、本ごとにディレクトリを分けることにしました。ファイル名を全て同じ名前で保存しておけば、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>v-bind</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>でパスを割り当てるときにディレクトリ名を切り替えるだけで良いからです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header2">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>#23 JSONデータを作成する</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>データの持ち方は決まりました。次はデータを作成します。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>載せたい情報をスプレッドシートにまとめる</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>はじめは自分でJSONを書こうとしましたが、結論として5分であきらめました。Googleの</Content>
  </CharacterStyleRange>
  <HyperlinkTextSource Self="htss-1" Name="" Hidden="false">
    <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Link">
      <Content>JSON Style Guide</Content>
    </CharacterStyleRange>
  </HyperlinkTextSource>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>（</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>https://google.github.io/styleguide/jsoncstyleguide.xml</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>）などを読んではみたのですが、今までの業務の中で1からJSONを設計することがなかったので、「ちょっと何言ってるかわからない」状態になってしまいました。 個人開発ですし、迷惑がかかるのは将来の自分だけ、という言い訳と共に、はじめはCSVからJSONを作ってくれるWebサービスを利用したほうがいいだろうという判断をしました。綺麗なJSONのデータ構造よりも、クソアプリカレンダーとこのコミックマーケット95の新刊を入稿に間に合うことのほうがはるかに大事だったのです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>そこで、まずはCSVを作ることにしました。</Content>
  </CharacterStyleRange>
  <HyperlinkTextSource Self="htss-2" Name="" Hidden="false">
    <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Link">
      <Content>Google SpreadSheet</Content>
    </CharacterStyleRange>
  </HyperlinkTextSource>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>（</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>https://docs.google.com/spreadsheets/d/16NGDz_8Xl4hAzjCPNHjx5pVN8cxNFOsoPngeLrF633A/edit?usp=sharing</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>）に必要な項目を記載します。JSONへどのように加工されるかがわからなかったため、1項目に複数の子項目が紐づいている場合はIDを降ることにしました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Figure">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 639 -485">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-639 -485" LeftDirection="-639 -485" RightDirection="-639 -485" />
              <PathPointType Anchor="-639 485" LeftDirection="-639 485" RightDirection="-639 485" />
              <PathPointType Anchor="639 485" LeftDirection="639 485" RightDirection="639 485" />
              <PathPointType Anchor="639 -485" LeftDirection="639 -485" RightDirection="639 -485" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -639 -485">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:../images/chapter5/spread_sheet.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Caption">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>作成したスプレッドシート</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>CSVをJSONに変換する</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>重要な情報が入ったCSVではないので、Webサービスを利用して手軽に変換したいという観点でWebサービスを探しました。その中でも</Content>
  </CharacterStyleRange>
  <HyperlinkTextSource Self="htss-3" Name="" Hidden="false">
    <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Link">
      <Content>SQLIFY</Content>
    </CharacterStyleRange>
  </HyperlinkTextSource>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>というWebサービスの画面がわかりやすそうだったため、早速変換してみることにしました。CSVまたはJSONをアップロードすると、SQL・JSON・CSVのどれかに変換することができるサービスです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Figure">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 639 -703">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-639 -703" LeftDirection="-639 -703" RightDirection="-639 -703" />
              <PathPointType Anchor="-639 703" LeftDirection="-639 703" RightDirection="-639 703" />
              <PathPointType Anchor="639 703" LeftDirection="639 703" RightDirection="639 703" />
              <PathPointType Anchor="639 -703" LeftDirection="639 -703" RightDirection="639 -703" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -639 -703">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:../images/chapter5/sqlify_top.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Caption">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>SQLIFYのWebサービスにアクセスしたところ</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>今回はSpreadSheetをCSV形式でダウンロードした後、SQLIFYへアップロードしました。アップロード後にCSVの行とJSONのカラム名の対応を修正し、データ型を決めることができます。手作業で数値と文字列の変換をする必要がないため、これはかなり便利だと思いました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Figure">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 635 -884.5">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-635 -884.5" LeftDirection="-635 -884.5" RightDirection="-635 -884.5" />
              <PathPointType Anchor="-635 884.5" LeftDirection="-635 884.5" RightDirection="-635 884.5" />
              <PathPointType Anchor="635 884.5" LeftDirection="635 884.5" RightDirection="635 884.5" />
              <PathPointType Anchor="635 -884.5" LeftDirection="635 -884.5" RightDirection="635 -884.5" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -635 -884.5">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:../images/chapter5/sqlify_convert.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Caption">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>CSVをアップロードしたあと</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>変換後のJSONですが、次のようなテキストがブラウザに表示されます。横に長すぎて紙面には入りきりません。データの途中が切れてしまっているのは仕様です。紙の幅には限界があるので勘弁していただきたいです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>[
{&quot;overviews_promotion&quot;:&quot;ふざけたタイトル&quot;,&quot;overviews_id&quot;:1,&quot;booth_url&quot;:&quot;https://booth.pm/ja/items/490460&quot;,&quot;book_title&quot;:&quot;ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2017/04/12/技術書典2_もふもふちゃんの戦い履歴&quot;,&quot;book_info_title&quot;:&quot;技術書典2 もふもふちゃんの戦い履歴&quot;,&quot;book_info_id&quot;:&quot;1&quot;,&quot;book_id&quot;:&quot;1&quot;,&quot;book_description&quot;:&quot;Elasticsearch社のプロダクトであるElasticsearch・Logstash・Kibanaを用いてログを分析してみようという本です。各ミドルウェアのインストールからKibanaでグラフを描画するまでの道のりを一通り網羅しつつまとめました。インプレスR＆Dさんから商業化もされています。&quot;},
{&quot;overviews_promotion&quot;:&quot;なにも伝わってこない表紙&quot;,&quot;overviews_id&quot;:2,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;http://amzn.asia/d/be7bGtk&quot;,&quot;book_info_title&quot;:&quot;商業本&quot;,&quot;book_info_id&quot;:&quot;2&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;布教本のはずなのにまさかの省略記法を使っている&quot;,&quot;overviews_id&quot;:3,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;&quot;,&quot;book_info_title&quot;:&quot;&quot;,&quot;book_info_id&quot;:&quot;&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;本編と全く関係ないペンギンの表紙&quot;,&quot;overviews_id&quot;:1,&quot;booth_url&quot;:&quot;https://mofu-mofu.booth.pm/items/666604&quot;,&quot;book_title&quot;:&quot;データを加工する技術&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2017/10/17/技術書典3_告知&quot;,&quot;book_info_title&quot;:&quot;技術書典3 告知&quot;,&quot;book_info_id&quot;:&quot;1&quot;,&quot;book_id&quot;:&quot;2&quot;,&quot;book_description&quot;:&quot;『ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～』の続編に当たる本です。今回はデータを収集・加工する工程に重点をおいて解説しています。Logstashを使ってALBのログを取得、filterプラグインを用いてデータを扱いやすい形に加工する方法について紹介しています。加えて、LogstashとFluentdの設定を見比べつつ、結局どちらを選択すればいいんだろう？ということも考えています。こちらは『Introduction Elastic Stack6』と合わせて商業化されました。&quot;},
{&quot;overviews_promotion&quot;:&quot;章が変わったときにページを詰める方法がわからず、むりやりペンギンの写真を詰め込んだ根性&quot;,&quot;overviews_id&quot;:2,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2017/10/23/技術書典3に参加しました&quot;,&quot;book_info_title&quot;:&quot;技術書典3に参加しました&quot;,&quot;book_info_id&quot;:&quot;2&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;魔法使いプリキュア！に似ているというだけで採用された表紙のフォント&quot;,&quot;overviews_id&quot;:3,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;http://amzn.asia/d/e3iTGAa&quot;,&quot;book_info_title&quot;:&quot;商業本&quot;,&quot;book_info_id&quot;:&quot;3&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;考えるのが面倒臭くて適当に作った表紙&quot;,&quot;overviews_id&quot;:1,&quot;booth_url&quot;:&quot;https://mofu-mofu.booth.pm/items/965753&quot;,&quot;book_title&quot;:&quot;Introduction Elastic Stack6&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2018/04/17/技術書典4にサークル参加します！&quot;,&quot;book_info_title&quot;:&quot;技術書典4にサークル参加します！&quot;,&quot;book_info_id&quot;:&quot;1&quot;,&quot;book_id&quot;:&quot;3&quot;,&quot;book_description&quot;:&quot;Elastic Stackがバージョン6になったので、バージョン6で追加された機能やElasticsearch APIの操作方法の知見を寄せ集めました。導入するだけでKibanaのBI画面作成までを実施してくれるFilebeat Modulesの使用例はバージョン6の目玉機能なのでは、と個人的に考えています。もちろんKibanaのUIがアップデートされたため、それに追従してKibanaを操作しつつデータを可視化する知見も入れ込みました。こちらは『データを加工する技術』と合わせて商業化されています。&quot;},
{&quot;overviews_promotion&quot;:&quot;この本のリポジトリのgit logを取得しているので駆け込み原稿であることがもろバレである&quot;,&quot;overviews_id&quot;:2,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2018/04/23/技術書典4に参加しました%E3%80%82&quot;,&quot;book_info_title&quot;:&quot;技術書典4に参加しました。&quot;,&quot;book_info_id&quot;:&quot;2&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;ちなみに（ユーザー名はマスキングして）そのまま商業化されている&quot;,&quot;overviews_id&quot;:3,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;http://amzn.asia/d/e3iTGAa&quot;,&quot;book_info_title&quot;:&quot;商業本&quot;,&quot;book_info_id&quot;:&quot;3&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;遊び紙の白い部分をこすると（無駄に）レモンのにおいがする。いいにおい。&quot;,&quot;overviews_id&quot;:1,&quot;booth_url&quot;:&quot;https://mofu-mofu.booth.pm/items/965770&quot;,&quot;book_title&quot;:&quot;ひよこエンジニアに送るお仕事サバイバルガイド&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2018/04/17/技術書典4にサークル参加します！&quot;,&quot;book_info_title&quot;:&quot;技術書典4にサークル参加します！&quot;,&quot;book_info_id&quot;:&quot;1&quot;,&quot;book_id&quot;:&quot;4&quot;,&quot;book_description&quot;:&quot;新卒4年目時点で感じた「こういう風に学べばよかった」「こういう風に質問すればよかった/されると嬉しい」「こんな人にはなりたくないなあ」「どうやって調べたらいいんだろう」的なエモポエムに対する感想＋もふもふちゃんのエモポエム集です。自分への戒め＋1年目で知ってたらもっと変わったかもな〜〜〜他の人にも教えたろ！みたいないい迷惑の知見を布教するつもりで書いた本その1です。&quot;},
{&quot;overviews_promotion&quot;:&quot;KUSOみたいな人がいて「きぃ〜〜〜〜〜っ！」となったので書いた&quot;,&quot;overviews_id&quot;:2,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2018/04/23/技術書典4に参加しました%E3%80%82&quot;,&quot;book_info_title&quot;:&quot;技術書典4に参加しました。&quot;,&quot;book_info_id&quot;:&quot;2&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;なぜか「あなたひよこちゃうやろ！」って人の元に多くの本が旅立っていった&quot;,&quot;overviews_id&quot;:3,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;https://ec.toranoana.jp/tora_r/ec/item/040030674964&quot;,&quot;book_info_title&quot;:&quot;とらのあな通販&quot;,&quot;book_info_id&quot;:&quot;3&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;仕事で全然技術的なことができず、本のネタが作れないのにコミケにでることになった&quot;,&quot;overviews_id&quot;:1,&quot;booth_url&quot;:&quot;https://mofu-mofu.booth.pm/items/965778&quot;,&quot;book_title&quot;:&quot;ひよこエンジニアに送るサバイバルガイド 〜深淵の闇を見た大人編〜&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2018/07/17/コミックマーケット94に出場します&quot;,&quot;book_info_title&quot;:&quot;コミックマーケット94に出場します&quot;,&quot;book_info_id&quot;:&quot;1&quot;,&quot;book_id&quot;:&quot;5&quot;,&quot;book_description&quot;:&quot;『ひよこエンジニアに送るお仕事サバイバルガイド』では書けなかったようなブラックなネタ（温めておいた）だけを集めて書いたのですが、このときはもう転職していたのですっかりやる気がなくなって…はないです。もふもふちゃんが仕事で出会ってやだったな〜〜〜と思った人のアンチパターン事例を集めました。自分が仲間入りしないように頑張ります。&quot;},
{&quot;overviews_promotion&quot;:&quot;新刊がないのは寂しいので「このKUSSSSSSSO〜〜〜〜〜」という気持ちを起こしてみた&quot;,&quot;overviews_id&quot;:2,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;&quot;,&quot;book_info_title&quot;:&quot;&quot;,&quot;book_info_id&quot;:&quot;&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;本が薄くてぺにゃってなる。ペニャペニャの本です&quot;,&quot;overviews_id&quot;:3,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;&quot;,&quot;book_info_title&quot;:&quot;&quot;,&quot;book_info_id&quot;:&quot;&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;},
{&quot;overviews_promotion&quot;:&quot;このためだけに高校数学の参考書を買った。しかも解説がわからなかったのでわかる人に教えてもらった。高校生かな？&quot;,&quot;overviews_id&quot;:1,&quot;booth_url&quot;:&quot;https://ec.toranoana.jp/tora_r/ec/item/040030674965&quot;,&quot;book_title&quot;:&quot;第1回 Webエンジニア基礎学力試験 問題と解説&quot;,&quot;book_info_url&quot;:&quot;http://rimarimadan.hatenablog.com/entry/2018/10/10/技術書典5に参加できるか怪しかったけど参加で&quot;,&quot;book_info_title&quot;:&quot;技術書典5に参加できるか怪しかったけど参加できた話&quot;,&quot;book_info_id&quot;:&quot;&quot;,&quot;book_id&quot;:&quot;6&quot;,&quot;book_description&quot;:&quot;Webアプリケーション関連の用語、色々あって毎回調べ直すのめんどくさ…そうだ用語集を作ろう！と思って原稿を始めました。進めるうちに「用語集だと結局読まない気がする」と思い始め、問題を考えて回答を作れば理解も深まるのでは…という結論に至りました。理解が深まったか…はちょっと自信がありませんが、学校の定期テストを考えている先生はほんと大変だなという気持ちになりました。通販は大好きなとらのあなさんにお願いしました。個人的にもお世話になっているので、とらのあな専売シールをつけてもらいたかったんです。&quot;},
{&quot;overviews_promotion&quot;:&quot;過去問題集を参考に表紙を作った。見開きで作ったら閉じ方向を間違えて作り直しになった。&quot;,&quot;overviews_id&quot;:2,&quot;booth_url&quot;:&quot;&quot;,&quot;book_title&quot;:&quot;&quot;,&quot;book_info_url&quot;:&quot;https://techbookfest.org/event/tbf05/circle/41000006&quot;,&quot;book_info_title&quot;:&quot;技術書典のサークルページ&quot;,&quot;book_info_id&quot;:&quot;&quot;,&quot;book_id&quot;:&quot;&quot;,&quot;book_description&quot;:&quot;&quot;}
]</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>このままではみづらいので、1冊目の本に絞ってデータを表示します。先ほどidを降った部分のせいで、無駄なJSONの塊ができていることがわかります。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>[
  {
    &quot;overviews_promotion&quot;: &quot;ふざけたタイトル&quot;,
    &quot;overviews_id&quot;: 1,
    &quot;booth_url&quot;: &quot;https://booth.pm/ja/items/490460&quot;,
    &quot;book_title&quot;: &quot;ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～&quot;,
    &quot;book_info_url&quot;: \r
    &quot;http://rimarimadan.hatenablog.com/entry/2017/04/12/技術書典2_もふもふちゃんの戦い履歴&quot;,
    &quot;book_info_title&quot;: &quot;技術書典2 もふもふちゃんの戦い履歴&quot;,
    &quot;book_info_id&quot;: &quot;1&quot;,
    &quot;book_id&quot;: &quot;1&quot;,
    &quot;book_description&quot;: \r
    &quot;Elasticsearch社のプロダクトであるElasticsearch・Logstash・Kibanaを用いてログを分析してみようという本です。\r
    各ミドルウェアのインストールからKibanaでグラフを描画するまでの道のりを一通り網羅しつつまとめました。\r
    インプレスR＆Dさんから商業化もされています。&quot;
  },
  {
    &quot;overviews_promotion&quot;: &quot;なにも伝わってこない表紙&quot;,
    &quot;overviews_id&quot;: 2,
    &quot;booth_url&quot;: &quot;&quot;,←空になっている
    &quot;book_title&quot;: &quot;&quot;,
    &quot;book_info_url&quot;: &quot;http://amzn.asia/d/be7bGtk&quot;,
    &quot;book_info_title&quot;: &quot;商業本&quot;,
    &quot;book_info_id&quot;: &quot;2&quot;,
    &quot;book_id&quot;: &quot;&quot;,
    &quot;book_description&quot;: &quot;&quot;
  },
  {
    &quot;overviews_promotion&quot;: &quot;布教本のはずなのにまさかの省略記法を使っている&quot;,
    &quot;overviews_id&quot;: 3,
    &quot;booth_url&quot;: &quot;&quot;,
    &quot;book_title&quot;: &quot;&quot;,
    &quot;book_info_url&quot;: &quot;&quot;,
    &quot;book_info_title&quot;: &quot;&quot;,
    &quot;book_info_id&quot;: &quot;&quot;,
    &quot;book_id&quot;: &quot;&quot;,
    &quot;book_description&quot;: &quot;&quot;
  }
  // これ以降省略</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>本当は1つの</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>に</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews_id</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>と</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews_promotion</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>が3つ紐づくようにしたいのです。このままでは利用することができません。仕方がないので、手作業で全て修正しました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>[
    {
        &quot;book_description&quot;: \r
        &quot;Elasticsearch社のプロダクトであるElasticsearch・Logstash・Kibanaを用いてログを分析してみようという本です。各ミドルウェアのインストールからKibanaでグラフを描画するまでの道のりを一通り網羅しつつまとめました。インプレスR＆Dさんから商業化もされています。&quot;,
        &quot;book_id&quot;: 1,
        &quot;book_info&quot;: [
          {
            &quot;book_info_id&quot;: 1,
            &quot;book_info_title&quot;: &quot;技術書典2 もふもふちゃんの戦い履歴&quot;,
            &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2017/04/12/技術書典2_もふもふちゃんの戦い履歴&quot;
          },
          {
            &quot;book_info_id&quot;: 2,
            &quot;book_info_title&quot;: &quot;商業本&quot;,
            &quot;book_info_url&quot;: &quot;http://amzn.asia/d/be7bGtk&quot;,
          }
        ],
        &quot;book_title&quot;: &quot;ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～&quot;,
        &quot;booth_url&quot;: &quot;https://booth.pm/ja/items/490460&quot;,
        &quot;overviews&quot;: [
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;ふざけたタイトル&quot;
        },
        {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;なにも伝わってこない表紙&quot;
        },
        {
          &quot;overviews_id&quot;: 3,
          &quot;overviews_promotion&quot;: &quot;布教本のはずなのにまさかの省略記法を使っている&quot;
        }
        ]
    },
    {
        &quot;book_description&quot;: &quot;『ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～』の続編に当たる本です。\r
        今回はデータを収集・加工する工程に重点をおいて解説しています。Logstashを使ってALBのログを取得、\r
        filterプラグインを用いてデータを扱いやすい形に加工する方法について紹介しています。\r
        加えて、LogstashとFluentdの設定を見比べつつ、結局どちらを選択すればいいんだろう？ということも考えています。\r
        こちらは『Introduction Elastic Stack6』と合わせて商業化されました。&quot;,
        &quot;book_id&quot;: 2,
        &quot;book_info&quot;: [
        {
          &quot;book_info_id&quot;: 1,
          &quot;book_info_title&quot;: &quot;技術書典3 告知&quot;,
          &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2017/10/17/技術書典3_告知&quot;,
        },
        {
          &quot;book_info_id&quot;: 2,
          &quot;book_info_title&quot;: &quot;技術書典3に参加しました&quot;,
          &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2017/10/23/技術書典3に参加しました&quot;,
        },
        {
          &quot;book_info_id&quot;: 3,
          &quot;book_info_title&quot;: &quot;商業本&quot;,
          &quot;book_info_url&quot;: &quot;http://amzn.asia/d/e3iTGAa&quot;,
        }
        ],
        &quot;book_title&quot;: &quot;データを加工する技術&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/666604&quot;,
        &quot;overviews&quot;: [
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;本編と全く関係ないペンギンの表紙&quot;
          },
          {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;章が変わったときにページを詰める方法がわからず、むりやりペンギンの写真を詰め込んだ根性&quot;
          },
          {
            &quot;overviews_id&quot;: 3,
            &quot;overviews_promotion&quot;: &quot;魔法使いプリキュア！に似ているというだけで採用された表紙のフォント&quot;
          }
        ]
    },
    {
        &quot;book_description&quot;: &quot;Elastic Stackがバージョン6になったので、バージョン6で追加された機能や\r
        Elasticsearch APIの操作方法の知見を寄せ集めました。導入するだけでKibanaのBI画面作成までを実施してくれる\r
        Filebeat Modulesの使用例はバージョン6の目玉機能なのでは、と個人的に考えています。\r
        もちろんKibanaのUIがアップデートされたため、それに追従してKibanaを操作しつつデータを可視化する知見も入れ込みました。\r
        こちらは『データを加工する技術』と合わせて商業化されています。&quot;,
        &quot;book_id&quot;: 3,
        &quot;book_info&quot;: [
          {
            &quot;book_info_id&quot;: 1,
            &quot;book_info_title&quot;: &quot;技術書典4にサークル参加します！&quot;,
            &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/17/技術書典4にサークル参加します！&quot;,
          },
          {
            &quot;book_info_id&quot;: 2,
            &quot;book_info_title&quot;: &quot;技術書典4に参加しました。&quot;,
            &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/23/技術書典4に参加しました。&quot;,
          },
          {
            &quot;book_info_id&quot;: 3,
            &quot;book_info_title&quot;: &quot;商業本&quot;,
            &quot;book_info_url&quot;: &quot;http://amzn.asia/d/e3iTGAa&quot;,
          }
        ],
        &quot;book_title&quot;: &quot;Introduction Elastic Stack6&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/965753&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;考えるのが面倒臭くて適当に作った表紙&quot;
          },
          {
            &quot;overviews_id&quot;: 2,
            &quot;overviews_promotion&quot;: &quot;この本のリポジトリのgit logを取得しているので駆け込み原稿であることがもろバレである&quot;    
          },
          {
            &quot;overviews_id&quot;: 3,
            &quot;overviews_promotion&quot;: &quot;ちなみに（ユーザー名はマスキングして）そのまま商業化されている&quot;
          }
        ]
    },
    {
        &quot;book_description&quot;: &quot;新卒4年目時点で感じた「こういう風に学べばよかった」「こういう風に質問すればよかった/されると嬉しい」\r
        「こんな人にはなりたくないなあ」「どうやって調べたらいいんだろう」的なエモポエムに対する感想＋もふもふちゃんのエモポエム集です。\r
        自分への戒め＋1年目で知ってたらもっと変わったかもな〜〜〜他の人にも教えたろ！\r
        みたいないい迷惑の知見を布教するつもりで書いた本その1です。&quot;,
        &quot;book_id&quot;: &quot;4&quot;,
        &quot;book_info&quot;:[
          {
            &quot;book_info_id&quot;: 1,
            &quot;book_info_title&quot;: &quot;技術書典4にサークル参加します！&quot;,
            &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/17/技術書典4にサークル参加します！&quot;,
          },
          {
            &quot;book_info_id&quot;: 2,
            &quot;book_info_title&quot;: &quot;技術書典4に参加しました。&quot;,
            &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/23/技術書典4に参加しました。&quot;,
          },
          {
            &quot;book_info_id&quot;: 3,
            &quot;book_info_title&quot;: &quot;とらのあな通販&quot;,
            &quot;book_info_url&quot;: &quot;https://ec.toranoana.jp/tora_r/ec/item/040030674964&quot;,
          }
        ],
        &quot;book_title&quot;: &quot;ひよこエンジニアに送るお仕事サバイバルガイド&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/965770&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;遊び紙の白い部分をこすると（無駄に）レモンのにおいがする。いいにおい。&quot;
          },
          {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;KUSOみたいな人がいて「きぃ〜〜〜〜〜っ！」となったので書いた&quot;
        },
        {
          &quot;overviews_id&quot;: 3,
          &quot;overviews_promotion&quot;: &quot;なぜか「あなたひよこちゃうやろ！」って人の元に多くの本が旅立っていった&quot;
        }
        ]
    },
    {
        &quot;book_description&quot;: &quot;『ひよこエンジニアに送るお仕事サバイバルガイド』では書けなかったような\r
        ブラックなネタ（温めておいた）だけを集めて書いたのですが、このときはもう転職していたのですっかりやる気がなくなって\r
        …はないです。もふもふちゃんが仕事で出会ってやだったな〜〜〜と思った人のアンチパターン事例を集めました。\r
        自分が仲間入りしないように頑張ります。&quot;,
        &quot;book_id&quot;: &quot;5&quot;,
        &quot;book_info&quot;:[
          {
            &quot;book_info_id&quot;: 1,
            &quot;book_info_title&quot;: &quot;コミックマーケット94に出場します&quot;,
            &quot;book_info_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/07/17/コミックマーケット94に出場します&quot;,
          }
        ],
        &quot;book_title&quot;: &quot;ひよこエンジニアに送るサバイバルガイド 〜深淵の闇を見た大人編〜&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/965778&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;仕事で全然技術的なことができず、本のネタが作れないのにコミケにでることになった&quot;
          },
          {
            &quot;overviews_id&quot;: 2,
            &quot;overviews_promotion&quot;: &quot;新刊がないのは寂しいので「このKUSSSSSSSO〜〜〜〜〜」という気持ちを起こしてみた&quot;
          },
          {
            &quot;overviews_id&quot;: 3,
            &quot;overviews_promotion&quot;: &quot;本が薄くてぺにゃってなる。ペニャペニャの本です&quot;
          }
        ]
    },
    {
        &quot;book_description&quot;: &quot;Webアプリケーション関連の用語、色々あって毎回調べ直すのめんどくさ…そうだ用語集を作ろう！\r
        と思って原稿を始めました。進めるうちに「用語集だと結局読まない気がする」と思い始め、\r
        問題を考えて回答を作れば理解も深まるのでは…という結論に至りました。\r
        理解が深まったか…はちょっと自信がありませんが、学校の定期テストを考えている先生はほんと大変だなという気持ちになりました。\r
        通販は大好きなとらのあなさんにお願いしました。個人的にもお世話になっているので、\r
        とらのあな専売シールをつけてもらいたかったんです。&quot;,
        &quot;book_id&quot;: &quot;6&quot;,
        &quot;book_info&quot;:[
          {
            &quot;book_info_id&quot;: 1,
            &quot;book_info_title&quot;: &quot;技術書典5に参加できるか怪しかったけど参加できた話&quot;,
            &quot;book_info_url&quot;: \r
            &quot;http://rimarimadan.hatenablog.com/entry/2018/10/10/技術書典5に参加できるか怪しかったけど参加できた話&quot;,
          },
          {
            &quot;book_info_id&quot;: 2,
            &quot;book_info_title&quot;: &quot;技術書典のサークルページ&quot;,
            &quot;book_info_url&quot;: &quot;https://techbookfest.org/event/tbf05/circle/41000006&quot;,
    
          }
        ],
        &quot;book_title&quot;: &quot;第1回 Webエンジニア基礎学力試験 問題と解説&quot;,
        &quot;booth_url&quot;: &quot;https://ec.toranoana.jp/tora_r/ec/item/040030674965&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;このためだけに高校数学の参考書を買った。\r
            しかも解説がわからなかったのでわかる人に教えてもらった。高校生かな？&quot;
          },
          {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;過去問題集を参考に表紙を作った。見開きで作ったら閉じ方向を間違えて作り直しになった。&quot;
        },
        {
          &quot;overviews_id&quot;: 3,
          &quot;overviews_promotion&quot; : &quot;中身よりも組版や表紙を頑張った気がする。どこを目指しているんだ…&quot;
        }
      ]
    }
] </Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>コミットログには</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Blockquote &gt; Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>に・ど・ど・やりたくない！</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>と書いてありました。全くもって同感です。間違いや抜け漏れがあるとは思いましたが、不具合を見つけたときに修正する方が効率が良いと感じたため一旦これにてJSONの作成は終了としました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header2">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>#19 JSONからデータを取得して表示できるようにする</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>今回のアプリケーションで一番難しかった部分です。動作するまでに6日もかかりました。何が難しかったのかというと、</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>ローカルの配列をどうやって読み込めば良いのか？</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JSONから特定のカラムの情報を抜くにはどうすればいいのか？</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JSONに1：Nのデータがあるときはどうすればいいのか？</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>この実装方法がわからずに詰まってしまいました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JSONからデータを取得する方法を探す</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>はじめに考えたことは、親コンポーネントの</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>App.vue</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>で独自のidを持ち、それの値に応じて子コンポーネントがJSONからデータを取得する、というものでした。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>このようにすれば、「今どの同人誌の情報を表示すれば良いか？」を算出するためのロジックを</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>App.vue</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>へ１回書くだけですみます。同じようなロジックを6回近く記載するのは大変面倒ですし、データの不整合が起きてしまうかもしれません。一括で管理しておきたいなと思いました。Vue.jsには</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>prop</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>という仕組みがあります。これを利用して親コンポーネントから子コンポーネントへデータを渡すことができます。子コンポーネントから親コンポーネントへデータを渡す場合、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>emit</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>という仕組みを利用します。今回は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>prop</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>を利用すれば目的が達成できそうだ、と思いました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>いきなり</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>prop</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>の処理を実装するのは無謀だと思いました。Vue.jsでJSONからデータを取得するサンプルコードは公式ドキュメントに載っていませんし、他の実装例ではアプリケーション外部のサーバーからJSONをHTTPの通信（GET）で取得する方法が多かったためです。具体的には</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>axios</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>というライブラリを用いてHTTP通信を行う実装が多く、ローカルからJSONを取得する事例はあまりありませんでした。こうなると自分で考える必要があります。一度に1個のことしか考えることができない、とわかっていたので「はじめはJSONから1つのデータを取得」「idの切り替えでデータを切り替えるのはその後」としました。今思うと正解だったと思います。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>実装のヒントはないか、とGitHubのissueやVue.jsのフォーラム、Stack Overflowなどの記事を読んでみました。すると、大きく分けて2つの事象で詰まってしまう人が多い、ということがわかりました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/NumList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>assetsフォルダにあるデータはimportで取得する。このときにパスの指定がうまくいかずにハマる人が多い。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/NumList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>ローカル以外（外部URL・APIサーバーから…など）はaxiosを利用する。ローカルのデータをaxiosで取ろうとしてうまくいかない！という内容の質問箱には「いやローカルならimportで取れますけど」と言われていることが多かった。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>1.</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>は画像のインポート時に利用した</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>require</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>を利用すれば回避できそうだ、と考えました。問題は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>2.</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>です。</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>axios</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>を利用する必要がないことはわかりました。では、一体どうやってローカルのJSONを取得すれば良いのでしょう？じゃあ方法を書いてくれ〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜っ！！！！！という憤りを感じてブラウザバックする、これの繰り返しでした。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>調べに調べた結果、一番参考になった実装はサークル</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>べころもち工房</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>の`</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>べこ</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>さんの実装でした。技術書典3で「このもちみたいなキャラクターがかわゆすな〜」と思って購入した同人誌だったのですが、こんなところで役に立つとは…！！！技術書典の出会いと自分の目利き力に感謝しました。本の名前は『Vue.jsでポートフォリオサイト制作記』です。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>べこさんのポートフォリオでは、自分の情報を</Content>
  </CharacterStyleRange>
  <HyperlinkTextSource Self="htss-4" Name="" Hidden="false">
    <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Link">
      <Content>JSONで保持</Content>
    </CharacterStyleRange>
  </HyperlinkTextSource>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>（</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>https://github.com/becolomochi/shirokuma/blob/master/static/data.json</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>）していました。同人誌の内容を参考にしつつ、このような実装を書いてみました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content></Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>import</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>でJSONデータをインポートし、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>data</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>部分でデータを割り当てれば良いのでは？と考えたからです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content> &lt;template&gt;
   &lt;div class=&quot;description-list&quot;&gt;
     &lt;div class=&quot;overview&quot;&gt;
       &lt;h3&gt;KUSO POINT&lt;/h3&gt;
       &lt;ul&gt;
         &lt;li v-for=&quot;(item, key) in overviews&quot; v-bind:key=&quot;item.id&quot;&gt;
           {{ item.promotion }}
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import promotionData from '../assets/book-data.json'
export default {
  name: 'descriptionList',
  data() {
    return {
      promotionData: promotionData,
      overviews: [
        { promotion: '' },
        { promotion: '' },
        { promotion: '' }
      ]
    }
  }
}
&lt;/script&gt;</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>しかし、これではHTMLタグへデータが割り当たっていません。</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>v-bind</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>で</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>promotionData</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>を利用していないので当たり前なのですが、このときは全く気付きませんでした。そこで、importしたJSONの割り当てがどこまでできているのかデバッグすることにしました。 まず、何かしらの処理を行って算出したデータを割り当てる場合は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>computed</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>を利用するらしい、という情報を目にしました。そこでとりあえず</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>computed</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>を使ってみることにしました。次に、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>console.log()</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>を使ってChromeの</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>Console</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>タブに文字の出力をするようにしました。こうすればどこまでデータがきているわかると思ったからです。出力する情報は、JSONの情報が全てが入っているはずの</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>bookData</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>と、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>bookData</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>の１番目に入っている</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>内の</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews_promotion</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>としました。JSONの情報は配列になっているのでは？と推測したためです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>    &lt;div class=&quot;overview&quot;&gt;
      &lt;h3&gt;KUSO POINT&lt;/h3&gt;
      &lt;ul&gt;
-        &lt;li v-for=&quot;(item, key) in overviews&quot; v-bind:key=&quot;item.id&quot;&gt;
-          {{ item.promotion }}
+        &lt;li v-for=&quot;(item, keys) in promotionData &quot; v-bind:key=&quot;item.id&quot;&gt;
+          {{ item.overviews_promotion }}
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;
 &lt;script&gt;
- import promotionData from '../assets/book-data.json'
+ import bookData from '../assets/book-data.json'
export default {
  name: 'descriptionList',
  data() {
    return {
-       promotionData: promotionData,
-       overviews: [
-         { promotion: '' },
-        { promotion: '' },
-         { promotion: '' }
-       ]
+       bookData: bookData,
+     }
+   },
+   computed: {
+     promotionData: function() {
+       console.log(bookData);
+       console.log(bookData[0].overviews.overviews_promotion);
+       return bookData[0].overviews.overviews_promotion;
     }
  }
}</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Figure">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 275.5 -323">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-275.5 -323" LeftDirection="-275.5 -323" RightDirection="-275.5 -323" />
              <PathPointType Anchor="-275.5 323" LeftDirection="-275.5 323" RightDirection="-275.5 323" />
              <PathPointType Anchor="275.5 323" LeftDirection="275.5 323" RightDirection="275.5 323" />
              <PathPointType Anchor="275.5 -323" LeftDirection="275.5 -323" RightDirection="275.5 -323" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -275.5 -323">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:../images/chapter5/get_json_data_second.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Caption">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Chromeのデバッグ結果</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>デバッグ画面で確認してみると、予想通り</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>bookData</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>＝JSONの情報は配列として取得されています。配列の中に1つの本に対して１つのオブジェクトが入っているようです。結果が出力されているということは、ここまでは意図した動作になっているのだ、と推測できます。問題は次です。 2つ目の出力が</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>となっています。直訳すると</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>未定義</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>という意味ですが、何も定義がない状態ではありません。</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>という値は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>という初期の値がセットされており、上書きもできない固定の値です。 FireFoxを開発しているMozillaのWeb技術解説サイト</Content>
  </CharacterStyleRange>
  <HyperlinkTextSource Self="htss-5" Name="" Hidden="false">
    <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Link">
      <Content>MDN web docs</Content>
    </CharacterStyleRange>
  </HyperlinkTextSource>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>（</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>）では</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Blockquote &gt; BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>配列や変数の値が代入されていない</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Blockquote &gt; BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>まだ値が代入されていない</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Blockquote &gt; BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>値を</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>return</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>しない関数</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>このような場合は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>が返却される、と解説されています。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>この情報から、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>bookData[0].overviews.overviews_promotion</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>というデータの取得方法は正しくないという推理をすることができます。配列に</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>bookData[0].overviews.overviews_promotion</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>が示すデータは存在しないから</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>になっていると考えられるためです。2つの</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>console.log</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>で</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>が返却されているのであれば、JSONのデータが取得できていないと考えられるのですが、今回はそうではありません。 よって、配列からデータを取得する部分がおかしいのだと推理しました。そこで、いくつか思いついた方法を試して結果を比較してみることにしました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>  computed: {
    console.log(bookData);
    const dataList = bookData;
    console.log(dataList[0]);
+     console.log(dataList[0].overviews);
    console.log(bookData[0].overviews.overviews_promotion);
    return bookData[0].overviews.overviews_promotion;
  }</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>この方法だと、overviews内に入っているデータの配列を全て取得することができました。しかし、今回は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews_promotion</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>に紐づく情報を1つずつ取得したいのです。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>ここで、配列の値の取得方法を再度確認することにしました。配列から値を取得する場合、</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>配列[インデックス番号]</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>と記載します。これは</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>dataList[0]</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>で同人誌の情報が入った配列の1番目の値が取得できています。配列の値にまた配列が入っている場合、そこにアクセスするためにも配列のインデックスを指定する必要があるのでは？と考えました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>今の実装では配列Aのデータにアクセスするときはインデックスを指定していますが、配列Aの中の配列Bにアクセスするときはインデックスを指定していません。結果、配列Bのどのインデックスの情報を取得すれば良いのか判断できず、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>になっているのでは？と考えました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>そこで、配列Bに当たる</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>にもインデックスを明示的に指定するような実装を書いてみました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>  computed: {
    console.log(bookData);
    const dataList = bookData;
    console.log(dataList[0]);
    console.log(dataList[0].overviews);
    console.log(bookData[0].overviews.overviews_promotion);
+   console.log(bookData[0].overviews[0].overviews_promotion);
    return bookData[0].overviews.overviews_promotion;
  }</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>結果として、コンソールに配列内にある</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>overviews</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>の値を出力することができました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Figure">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 273.5 -431">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-273.5 -431" LeftDirection="-273.5 -431" RightDirection="-273.5 -431" />
              <PathPointType Anchor="-273.5 431" LeftDirection="-273.5 431" RightDirection="-273.5 431" />
              <PathPointType Anchor="273.5 431" LeftDirection="273.5 431" RightDirection="273.5 431" />
              <PathPointType Anchor="273.5 -431" LeftDirection="273.5 -431" RightDirection="273.5 -431" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -273.5 -431">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:../images/chapter5/get_overviews_data.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Caption">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Chromeのデバッグ結果</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JSONからデータを繰り返し取得する</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>配列のインデックスを繰り返し処理で変化させることができれば、JSONの子項目を1回ずつ</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>v-bind</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>したリストを作成できるはずです。そこで、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>ForEach</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>文を利用して処理を作ってみることにしました。</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>for...of文</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>や</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>for文</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>でも同じような処理が作れると思います。利用用途に合わせて選べるようになりたいですね。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>  computed: {
    promotionData: function() {
-       console.log(bookData);
-       const dataList = bookData[0].overviews;
-       console.log(bookData[0].overviews[0].overviews_promotion);
-       return bookData[0].overviews.overviews_promotion;
+       // 繰り返し処理でoverviews_promotionの値だけ抜いてreturnする
+       const dataList = bookData[0].overviews.forEach((array_element, index, array) =&gt; {
+         console.log(array_element);
+       });
    }
  }
}</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>配列を繰り返し取得することができたので、今度は取得した配列の値だけを代入した配列を新規に作成する必要があります。</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>promotionData</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>関数で返却する値として利用するためです。今回は</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>push</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>メソッドを利用して、配列から取得した値を変数に入れ、その変数を返却する値である配列に追加する処理を記載しました。最初は配列から値を取得する部分とは</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>push</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>の処理を一緒に実施しようと考えていたのですが、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>undefined</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>になってしまったので修正しました。また、forEachを書ける自信がなかったので</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>for文</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>で記載することにしました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>  computed: {
    promotionData: function() {
-       // 繰り返し処理でoverviews_promotionの値だけ抜いてreturnする
-       const dataList = bookData[0].overviews.forEach((array_element, index, array) =&gt; {
-         console.log(array_element);
-       });
      // ここから下を追記
      // 繰り返し処理でoverviews_promotionの値を全部抜いて新しい配列を作り、returnする
      const arrayLength = bookData[0].overviews.length;
      const arrayData = bookData[0].overviews
      console.log(arrayLength);
      console.log(arrayData);
      console.log(arrayData[0].overviews_promotion);
      const promotions = []
      for (let count = 0; count &lt; arrayLength; count++) {
        const data = arrayData[count].overviews_promotion;
        promotions.push(data);
      }
      console.log(promotions);
      return promotions;
    }
  }
}</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>合わせて、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>template</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>側でも配列のデータを描画できるようにしました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>&lt;!-- 途中省略 --&gt;
  &lt;div class=&quot;overview&quot;&gt;
    &lt;h3&gt;KUSO POINT&lt;/h3&gt;
    &lt;ul&gt;
-       &lt;li v-for=&quot;(item, keys) in promotionData &quot; v-bind:key=&quot;item.id&quot;&gt;
-         {{ item.overviews_promotion }}
+       &lt;li v-for=&quot;item in promotionData&quot;&gt;
+         {{ item }}
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Figure">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 273.5 -431">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-273.5 -431" LeftDirection="-273.5 -431" RightDirection="-273.5 -431" />
              <PathPointType Anchor="-273.5 431" LeftDirection="-273.5 431" RightDirection="-273.5 431" />
              <PathPointType Anchor="273.5 431" LeftDirection="273.5 431" RightDirection="273.5 431" />
              <PathPointType Anchor="273.5 -431" LeftDirection="273.5 -431" RightDirection="273.5 -431" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -273.5 -431">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:../images/chapter5/get_overviews_data.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Caption">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>画面でもoverviewsないのデータを描画できるようにしたところ</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>他のコンポーネントも同じようにJSONデータを取得する</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JSONデータの不整合や、画面に表示できていない部分を修正し、画面の表示を全てJSONから取得したデータでまかなうようにできました。GitHubのPull Requestをみると、かなり修正が入っていることがわかります。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>assets/book-data.json</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>発刊年月の情報を含めるのをすっかり忘れていたことに気づき、手打ちでデータを書き換えました。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>[
    {
        &quot;book_description&quot;: &quot;Elasticsearch社のプロダクトであるElasticsearch・Logstash・Kibanaを用いてログを分析してみようという本です。各ミドルウェアのインストールからKibanaでグラフを描画するまでの道のりを一通り網羅しつつまとめました。インプレスR＆Dさんから商業化もされています。&quot;,
        &quot;book_id&quot;: 1,
        &quot;book_info&quot;: [
          {
            &quot;year&quot;: 2017,
            &quot;month&quot;: &quot;4月&quot;,
            &quot;event_name&quot;: &quot;技術書典2&quot;
          }
        ],
        &quot;book_url&quot;: [
          {
            &quot;book_url_id&quot;: 1,
            &quot;book_url_title&quot;: &quot;技術書典2 もふもふちゃんの戦い履歴&quot;,
            &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2017/04/12/技術書典2_もふもふちゃんの戦い履歴&quot;
          },
          {
            &quot;book_url_id&quot;: 2,
            &quot;book_url_title&quot;: &quot;商業本&quot;,
            &quot;book_url_url&quot;: &quot;http://amzn.asia/d/be7bGtk&quot;
          }
        ],
        &quot;book_title&quot;: &quot;ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～&quot;,
        &quot;booth_url&quot;: &quot;https://booth.pm/ja/items/490460&quot;,
        &quot;overviews&quot;: [
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;ふざけたタイトル&quot;
        },
        {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;なにも伝わってこない表紙&quot;
        },
        {
          &quot;overviews_id&quot;: 3,
          &quot;overviews_promotion&quot;: &quot;布教本のはずなのにまさかの省略記法を使っている&quot;
        }
        ]
    },
    {
        &quot;book_description&quot;: &quot;『ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～』の続編に当たる本です。今回はデータを収集・加工する工程に重点をおいて解説しています。Logstashを使ってALBのログを取得、filterプラグインを用いてデータを扱いやすい形に加工する方法について紹介しています。加えて、LogstashとFluentdの設定を見比べつつ、結局どちらを選択すればいいんだろう？ということも考えています。こちらは『Introduction Elastic Stack6』と合わせて商業化されました。&quot;,
        &quot;book_id&quot;: 2,
        &quot;book_info&quot;: [
          {
            &quot;year&quot;: 2017,
            &quot;month&quot;: &quot;10月&quot;,
            &quot;event_name&quot;: &quot;技術書典3&quot;
          }
        ],
        &quot;book_url&quot;: [
        {
          &quot;book_url_id&quot;: 1,
          &quot;book_url_title&quot;: &quot;技術書典3 告知&quot;,
          &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2017/10/17/技術書典3_告知&quot;
        },
        {
          &quot;book_url_id&quot;: 2,
          &quot;book_url_title&quot;: &quot;技術書典3に参加しました&quot;,
          &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2017/10/23/技術書典3に参加しました&quot;
        },
        {
          &quot;book_url_id&quot;: 3,
          &quot;book_url_title&quot;: &quot;商業本&quot;,
          &quot;book_url_url&quot;: &quot;http://amzn.asia/d/e3iTGAa&quot;
        }
        ],
        &quot;book_title&quot;: &quot;データを加工する技術&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/666604&quot;,
        &quot;overviews&quot;: [
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;本編と全く関係ないペンギンの表紙&quot;
          },
          {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;章が変わったときにページを詰める方法がわからず、むりやりペンギンの写真を詰め込んだ根性&quot;
          },
          {
            &quot;overviews_id&quot;: 3,
            &quot;overviews_promotion&quot;: &quot;魔法使いプリキュア！に似ているというだけで採用された表紙のフォント&quot;
          }
        ]
    },
    {
        &quot;book_description&quot;: &quot;Elastic Stackがバージョン6になったので、バージョン6で追加された機能やElasticsearch APIの操作方法の知見を寄せ集めました。導入するだけでKibanaのBI画面作成までを実施してくれるFilebeat Modulesの使用例はバージョン6の目玉機能なのでは、と個人的に考えています。もちろんKibanaのUIがアップデートされたため、それに追従してKibanaを操作しつつデータを可視化する知見も入れ込みました。こちらは『データを加工する技術』と合わせて商業化されています。&quot;,
        &quot;book_id&quot;: 3,
        &quot;book_info&quot;: [
          {
            &quot;year&quot;: 2018,
            &quot;month&quot;: &quot;4月&quot;,
            &quot;event_name&quot;: &quot;技術書典4&quot;
          }
        ],
        &quot;book_url&quot;: [
          {
            &quot;book_url_id&quot;: 1,
            &quot;book_url_title&quot;: &quot;技術書典4にサークル参加します！&quot;,
            &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/17/技術書典4にサークル参加します！&quot;
          },
          {
            &quot;book_url_id&quot;: 2,
            &quot;book_url_title&quot;: &quot;技術書典4に参加しました。&quot;,
            &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/23/技術書典4に参加しました%E3%80%82&quot;
          },
          {
            &quot;book_url_id&quot;: 3,
            &quot;book_url_title&quot;: &quot;商業本&quot;,
            &quot;book_url_url&quot;: &quot;http://amzn.asia/d/e3iTGAa&quot;
          }
        ],
        &quot;book_title&quot;: &quot;Introduction Elastic Stack6&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/965753&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;考えるのが面倒臭くて適当に作った表紙&quot;
          },
          {
            &quot;overviews_id&quot;: 2,
            &quot;overviews_promotion&quot;: &quot;この本のリポジトリのgit logを取得しているので駆け込み原稿であることがもろバレである&quot;    
          },
          {
            &quot;overviews_id&quot;: 3,
            &quot;overviews_promotion&quot;: &quot;ちなみに（ユーザー名はマスキングして）そのまま商業化されている&quot;
          }
        ]
    },
    {
        &quot;book_description&quot;: &quot;新卒4年目時点で感じた「こういう風に学べばよかった」「こういう風に質問すればよかった/されると嬉しい」「こんな人にはなりたくないなあ」「どうやって調べたらいいんだろう」的なエモポエムに対する感想＋もふもふちゃんのエモポエム集です。自分への戒め＋1年目で知ってたらもっと変わったかもな〜〜〜他の人にも教えたろ！みたいないい迷惑の知見を布教するつもりで書いた本その1です。&quot;,
        &quot;book_id&quot;: &quot;4&quot;,
        &quot;book_info&quot;: [
          {
            &quot;year&quot;: 2018,
            &quot;month&quot;: &quot;4月&quot;,
            &quot;event_name&quot;: &quot;技術書典4&quot;
          }
        ],
        &quot;book_url&quot;:[
          {
            &quot;book_url_id&quot;: 1,
            &quot;book_url_title&quot;: &quot;技術書典4にサークル参加します！&quot;,
            &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/17/技術書典4にサークル参加します！&quot;
          },
          {
            &quot;book_url_id&quot;: 2,
            &quot;book_url_title&quot;: &quot;技術書典4に参加しました。&quot;,
            &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/04/23/技術書典4に参加しました%E3%80%82&quot;
          },
          {
            &quot;book_url_id&quot;: 3,
            &quot;book_url_title&quot;: &quot;とらのあな通販&quot;,
            &quot;book_url_url&quot;: &quot;https://ec.toranoana.jp/tora_r/ec/item/040030674964&quot;
          }
        ],
        &quot;book_title&quot;: &quot;ひよこエンジニアに送るお仕事サバイバルガイド&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/965770&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;遊び紙の白い部分をこすると（無駄に）レモンのにおいがする。いいにおい。&quot;
          },
          {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;KUSOみたいな人がいて「きぃ〜〜〜〜〜っ！」となったので書いた&quot;
        },
        {
          &quot;overviews_id&quot;: 3,
          &quot;overviews_promotion&quot;: &quot;なぜか「あなたひよこちゃうやろ！」って人の元に多くの本が旅立っていった&quot;
        }
        ]
    },
    {
        &quot;book_description&quot;: &quot;『ひよこエンジニアに送るお仕事サバイバルガイド』では書けなかったようなブラックなネタ（温めておいた）だけを集めて書いたのですが、このときはもう転職していたのですっかりやる気がなくなって…はないです。もふもふちゃんが仕事で出会ってやだったな〜〜〜と思った人のアンチパターン事例を集めました。自分が仲間入りしないように頑張ります。&quot;,
        &quot;book_id&quot;: &quot;5&quot;,
        &quot;book_info&quot;: [
          {
            &quot;year&quot;: 2018,
            &quot;month&quot;: &quot;8月&quot;,
            &quot;event_name&quot;: &quot;コミックマーケット94&quot;
          }
        ],
        &quot;book_url&quot;:[
          {
            &quot;book_url_id&quot;: 1,
            &quot;book_url_title&quot;: &quot;コミックマーケット94に出場します&quot;,
            &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/07/17/コミックマーケット94に出場します&quot;
          }
        ],
        &quot;book_title&quot;: &quot;ひよこエンジニアに送るサバイバルガイド 〜深淵の闇を見た大人編〜&quot;,
        &quot;booth_url&quot;: &quot;https://mofu-mofu.booth.pm/items/965778&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;仕事で全然技術的なことができず、本のネタが作れないのにコミケにでることになった&quot;
          },
          {
            &quot;overviews_id&quot;: 2,
            &quot;overviews_promotion&quot;: &quot;新刊がないのは寂しいので「このKUSSSSSSSO〜〜〜〜〜」という気持ちを起こしてみた&quot;
          },
          {
            &quot;overviews_id&quot;: 3,
            &quot;overviews_promotion&quot;: &quot;本が薄くてぺにゃってなる。ペニャペニャの本です&quot;
          }
        ]
    },
    {
        &quot;book_description&quot;: &quot;Webアプリケーション関連の用語、色々あって毎回調べ直すのめんどくさ…そうだ用語集を作ろう！と思って原稿を始めました。進めるうちに「用語集だと結局読まない気がする」と思い始め、問題を考えて回答を作れば理解も深まるのでは…という結論に至りました。理解が深まったか…はちょっと自信がありませんが、学校の定期テストを考えている先生はほんと大変だなという気持ちになりました。通販は大好きなとらのあなさんにお願いしました。個人的にもお世話になっているので、とらのあな専売シールをつけてもらいたかったんです。&quot;,
        &quot;book_id&quot;: &quot;6&quot;,
        &quot;book_info&quot;: [
          {
            &quot;year&quot;: 2018,
            &quot;month&quot;: &quot;10月&quot;,
            &quot;event_name&quot;: &quot;技術書典5&quot;
          }
        ],
        &quot;book_url&quot;:[
          {
            &quot;book_url_id&quot;: 1,
            &quot;book_url_title&quot;: &quot;技術書典5に参加できるか怪しかったけど参加できた話&quot;,
            &quot;book_url_url&quot;: &quot;http://rimarimadan.hatenablog.com/entry/2018/10/10/技術書典5に参加できるか怪しかったけど参加できた話&quot;
          },
          {
            &quot;book_url_id&quot;: 2,
            &quot;book_url_title&quot;: &quot;技術書典のサークルページ&quot;,
            &quot;book_url_url&quot;: &quot;https://techbookfest.org/event/tbf05/circle/41000006&quot;
    
          }
        ],
        &quot;book_title&quot;: &quot;第1回 Webエンジニア基礎学力試験 問題と解説&quot;,
        &quot;booth_url&quot;: &quot;https://ec.toranoana.jp/tora_r/ec/item/040030674965&quot;,
        &quot;overviews&quot;:[
          {
            &quot;overviews_id&quot;: 1,
            &quot;overviews_promotion&quot;: &quot;このためだけに高校数学の参考書を買った。しかも解説がわからなかったのでわかる人に教えてもらった。高校生かな？&quot;
          },
          {
          &quot;overviews_id&quot;: 2,
          &quot;overviews_promotion&quot;: &quot;過去問題集を参考に表紙を作った。見開きで作ったら閉じ方向を間違えて作り直しになった。&quot;
        },
        {
          &quot;overviews_id&quot;: 3,
          &quot;overviews_promotion&quot; : &quot;中身よりも組版や表紙を頑張った気がする。どこを目指しているんだ…&quot;
        }
      ]
    }
]</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>components/BookDescription.vue</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>１項目しかないデータに関しては、配列のインデックスを取得すればデータにアクセスできます。特に難しいことはありませんでした。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>&lt;template&gt;
  &lt;div class=&quot;book-description&quot;&gt;
    &lt;div class=&quot;description&quot; v-bind:description=&quot;descText&quot;&gt;{{ descText }}&lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import bookData from '../assets/book-data.json'
export default {
  name: 'bookDescription',
  data() {
    return {
      bookData: bookData
      }
  },
  computed: {
    descText : function() {
      return bookData[0].book_description
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
  .book-description {
    margin-top: 20px;
    width: 570px;
  }
  .description {
    font-size: 16px;
    line-height: 26px;
  }
&lt;/style&gt;</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>components/BookImage.vue</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>1つのコンポーネントに2つも</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>v-for</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>が入っているコンポーネントです。このようなときは、</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Code">
    <Content>v-bind</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>するデータを分けて定義し、それぞれに対して別の処理を書く方法でデータの割り当てを変更することができます。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>&lt;template&gt;
  &lt;div class=&quot;book-info&quot;&gt;
    &lt;div class=&quot;basic-info&quot;&gt;
      &lt;div class=&quot;published-year&quot;&gt;
        &lt;h4&gt;発刊年月・イベント名&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li v-for=&quot;info in infoTexts&quot; v-bind:key=&quot;info.id&quot;&gt;
            {{ info }}
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;posts-info&quot;&gt;
        &lt;h4&gt;関連URL&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li v-for=&quot;list in posts&quot; v-bind:key=&quot;list.id&quot;&gt;&lt;a href=&quot;list.url&quot;&gt;{{ list }}&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import bookData from '../assets/book-data.json'
export default {
  name: 'bookInfo',
  data() {
    return {
      bookData: bookData
    }
  },
  computed: {
    infoTexts: function() {
      const info = [];
      // JSONからinfoTextsに必要なデータを抜く。データは1冊の本に1つしかないのがわかっているので、配列の一番目の値を取得する。
      const arrayData = bookData[0].book_info;
      const year = arrayData[0].year;
      const month = arrayData[0].month;
      const eventName = arrayData[0].event_name;
      // 定数から配列を作成する。
      info.push(year);
      info.push(month);
      info.push(eventName);
      return info;
    },
    posts: function() {
      // 最終的に返却したい配列を定義
      const url = [];
      // JSON内のbook＿urlの配列の長さ・配列のデータを取得し、本のURLの値だけを持っている配列を作成する。
      const arrayLength = bookData[0].book_url.length;
      const arrayData = bookData[0].book_url;
      for(let count = 0; count &lt; arrayLength; count++){
        const data = arrayData[count].book_url_url;
        url.push(data);
      }
      return url;
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
  .book-info {
    font-size: 16px;
    line-height: 26px;
  }
  .published-info {
    margin-right: 5px;
  }
  h4 {
    font-size: 20px;
  }
&lt;/style&gt;</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>components/BookTitle.vue</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>BookDescription.vueと同じような実装です。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>&lt;template&gt;
  &lt;div class=&quot;book-title&quot;&gt;
    &lt;div class=&quot;fanbook-title&quot;&gt;
      &lt;div class=&quot;fan-book&quot; v-bind:title=&quot;bookTitle&quot;&gt;{{ bookTitle }}&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import bookData from '../assets/book-data.json'
export default {
  name: 'bookTitle',
  data() {
    return {
      bookData: bookData
    }
  },
  computed: {
    bookTitle: function() {
      //JSONから本のタイトルを取得する
      return bookData[0].book_title;
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
  .book-title {
    background-color: #E5E400;
    color: #32BDED;
    font-size: 30px;
  }
  .fanbook-title {
    width: 520px;
  }
&lt;/style&gt;</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>components/BoothButton.vue</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>BookDescription.vue・BookTitle.vueと同じような実装です。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content> &lt;template&gt;
  &lt;div class=&quot;booth-button&quot;&gt;
    &lt;div class=&quot;button&quot;&gt;
      &lt;a v-bind:href=&quot;boothUrl&quot;&gt;&lt;p&gt;電子版をポチる&lt;/p&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import bookData from '../assets/book-data.json'
export default {
  name: 'boothButton',
  data() {
    return {
        bookData: bookData
    }
  },
  computed: {
    boothUrl: function() {
      // JSONからBOOTHのURLを取得して返却する
      return bookData[0].booth_url;
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
  .booth-button {
    margin-top: 60px;
    height: 200px;
  }
  .button {
    display: flex;
    flex-direction: center;
    justify-content: center;
  }
  a {
    background-color: #32BDED;
    color: #E40067;
    font-size: 20px;
    font-weight: bold;
    height: 60px;
    text-align: center;
    text-decoration: none;
    width: 400px;
    
  }
&lt;/style&gt;</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>components/DescriptionList.vue</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>本編で試行錯誤したものの最終形です。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>&lt;template&gt;
  &lt;div class=&quot;description-list&quot;&gt;
    &lt;div class=&quot;overview&quot;&gt;
      &lt;h3&gt;KUSO POINT&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li v-for=&quot;item in promotionData&quot; v-bind:key=&quot;item.id&quot;&gt;
          {{ item }}
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import bookData from '../assets/book-data.json'
export default {
  name: 'descriptionList',
  data() {
    return {
      bookData: bookData
    }
  },
  computed: {
    promotionData: function() {
      // 繰り返し処理でoverviews_promotionの値を全部抜いて新しい配列を作り、returnする
      const arrayLength = bookData[0].overviews.length;
      const arrayData = bookData[0].overviews;
      const promotions = [];
      for (let count = 0; count &lt; arrayLength; count++) {
        const data = arrayData[count].overviews_promotion;
        promotions.push(data);
      }
      return promotions;
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
  .descriptiion-list {
    height: 250px;
    margin-top: 20px;
    width: 570px;
  }
  h3 {
    font-size: 24px;
  }
  li {
    font-size: 16px;
    line-height: 26px;
  }
&lt;/style&gt;</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>これをブラウザ上で確認すると、次のように表示されます。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Figure">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 801.5 -465">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-801.5 -465" LeftDirection="-801.5 -465" RightDirection="-801.5 -465" />
              <PathPointType Anchor="-801.5 465" LeftDirection="-801.5 465" RightDirection="-801.5 465" />
              <PathPointType Anchor="801.5 465" LeftDirection="801.5 465" RightDirection="801.5 465" />
              <PathPointType Anchor="801.5 -465" LeftDirection="801.5 -465" RightDirection="801.5 -465" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -801.5 -465">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:../images/chapter5/19_finish.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Caption">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>最終的なWebアプリケーションの画面</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Issues</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://github.com/MofuMofu2/portfolio-vue/issues/19</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://github.com/MofuMofu2/portfolio-vue/issues/23</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Pull Requests</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://github.com/MofuMofu2/portfolio-vue/pull/26</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://github.com/MofuMofu2/portfolio-vue/pull/27</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>りまりま団の同人誌リスト</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://docs.google.com/spreadsheets/d/16NGDz_8Xl4hAzjCPNHjx5pVN8cxNFOsoPngeLrF633A/edit?usp=sharing</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>SQLIFY（CSVをJSONに変換する）</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://sqlify.io/convert</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JSONからデータを取得する</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header4">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Why i can’t filter local json file in this case (vuejs2)</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://stackoverflow.com/questions/52239094/why-i-cant-filter-local-json-file-in-this-case-vuejs2</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header4">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>VueJS - Reading data from local json file into vis.js timeline</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://stackoverflow.com/questions/45425448/vuejs-reading-data-from-local-json-file-into-vis-js-timeline</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header4">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Vue.jsでポートフォリオサイト制作記</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>参考にしたページはp28と29です。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://booth.pm/ja/items/667217</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header4">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>べころもち工房のべこさんのリポジトリ（JSONからデータを取得する部分）</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://github.com/becolomochi/shirokuma/blob/master/static/data.json</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header3">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>JavaScriptで配列やオブジェクトの操作方法を調べる</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header4">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>js-primer オブジェクト</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>MDNと一緒にいつも参考にさせていただいてます。</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://jsprimer.net/basic/object/</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header4">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>js-primer 配列</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://jsprimer.net/basic/array/</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header4">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>undefined</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/BulList &gt; first" NumberingContinue="false">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>

  </Story>
  <HyperlinkURLDestination Self="HyperlinkURLDestination/https%3a//developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined" Name="link" DestinationURL="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined" DestinationUniqueKey="1" />
  <Hyperlink Self="uf-5" Name="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined" Source="htss-5" Visible="true" DestinationUniqueKey="1">
    <Properties>
      <BorderColor type="enumeration">Black</BorderColor>
      <Destination type="object">HyperlinkURLDestination/https%3a//developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined</Destination>
    </Properties>
  </Hyperlink>
  <HyperlinkURLDestination Self="HyperlinkURLDestination/https%3a//github.com/becolomochi/shirokuma/blob/master/static/data.json" Name="link" DestinationURL="https://github.com/becolomochi/shirokuma/blob/master/static/data.json" DestinationUniqueKey="1" />
  <Hyperlink Self="uf-4" Name="https://github.com/becolomochi/shirokuma/blob/master/static/data.json" Source="htss-4" Visible="true" DestinationUniqueKey="1">
    <Properties>
      <BorderColor type="enumeration">Black</BorderColor>
      <Destination type="object">HyperlinkURLDestination/https%3a//github.com/becolomochi/shirokuma/blob/master/static/data.json</Destination>
    </Properties>
  </Hyperlink>
  <HyperlinkURLDestination Self="HyperlinkURLDestination/https%3a//sqlify.io/" Name="link" DestinationURL="https://sqlify.io/" DestinationUniqueKey="1" />
  <Hyperlink Self="uf-3" Name="https://sqlify.io/" Source="htss-3" Visible="true" DestinationUniqueKey="1">
    <Properties>
      <BorderColor type="enumeration">Black</BorderColor>
      <Destination type="object">HyperlinkURLDestination/https%3a//sqlify.io/</Destination>
    </Properties>
  </Hyperlink>
  <HyperlinkURLDestination Self="HyperlinkURLDestination/https%3a//docs.google.com/spreadsheets/d/16NGDz_8Xl4hAzjCPNHjx5pVN8cxNFOsoPngeLrF633A/edit?usp=sharing" Name="link" DestinationURL="https://docs.google.com/spreadsheets/d/16NGDz_8Xl4hAzjCPNHjx5pVN8cxNFOsoPngeLrF633A/edit?usp=sharing" DestinationUniqueKey="1" />
  <Hyperlink Self="uf-2" Name="https://docs.google.com/spreadsheets/d/16NGDz_8Xl4hAzjCPNHjx5pVN8cxNFOsoPngeLrF633A/edit?usp=sharing" Source="htss-2" Visible="true" DestinationUniqueKey="1">
    <Properties>
      <BorderColor type="enumeration">Black</BorderColor>
      <Destination type="object">HyperlinkURLDestination/https%3a//docs.google.com/spreadsheets/d/16NGDz_8Xl4hAzjCPNHjx5pVN8cxNFOsoPngeLrF633A/edit?usp=sharing</Destination>
    </Properties>
  </Hyperlink>
  <HyperlinkURLDestination Self="HyperlinkURLDestination/https%3a//google.github.io/styleguide/jsoncstyleguide.xml" Name="link" DestinationURL="https://google.github.io/styleguide/jsoncstyleguide.xml" DestinationUniqueKey="1" />
  <Hyperlink Self="uf-1" Name="https://google.github.io/styleguide/jsoncstyleguide.xml" Source="htss-1" Visible="true" DestinationUniqueKey="1">
    <Properties>
      <BorderColor type="enumeration">Black</BorderColor>
      <Destination type="object">HyperlinkURLDestination/https%3a//google.github.io/styleguide/jsoncstyleguide.xml</Destination>
    </Properties>
  </Hyperlink>
</Document>
